{"version":3,"sources":["components/images/beth.png","components/images/birdperson.png","components/images/evilmorty.png","components/images/gianthead.png","components/images/goldenford.png","components/images/jerry.png","components/images/jessica.png","components/images/meeseeks.png","components/images/morty.png","components/images/mr.png","components/images/rick.png","components/images/summer.png","components/NavBar/NavBar.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","components/images/images.js","components/ClickyGame.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","i","components_Character_Character","key","Footer","Banner","images","beth","birdperson","evilmorty","gianthead","goldenford","jerry","jessica","meeseeks","morty","mr","rick","summer","ClickyGame","state","allCharacters","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","handleShuffle","shuffledImages","array","length","j","Math","floor","random","_ref","shuffleImages","setState","newArr","slice","shuffleArr","push","splice","clickedElem","_this2","this","prevState","shuffled","includes","setTimeout","components_NavBar_NavBar","components_Banner_Banner","components_Container_Container","components_Footer_Footer","Component","App","components_ClickyGame","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4c3c1337.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beth.4d5e65a0.png\";","module.exports = __webpack_public_path__ + \"static/media/birdperson.612ba8d4.png\";","module.exports = __webpack_public_path__ + \"static/media/evilmorty.0657e1f4.png\";","module.exports = __webpack_public_path__ + \"static/media/gianthead.978b3847.png\";","module.exports = __webpack_public_path__ + \"static/media/goldenford.3774b39d.png\";","module.exports = __webpack_public_path__ + \"static/media/jerry.af8e8a84.png\";","module.exports = __webpack_public_path__ + \"static/media/jessica.a9644830.png\";","module.exports = __webpack_public_path__ + \"static/media/meeseeks.9667b7ee.png\";","module.exports = __webpack_public_path__ + \"static/media/morty.244deeda.png\";","module.exports = __webpack_public_path__ + \"static/media/mr.d61b2d5b.png\";","module.exports = __webpack_public_path__ + \"static/media/rick.06b65841.png\";","module.exports = __webpack_public_path__ + \"static/media/summer.afdbb7bf.png\";","import React from 'react';\nimport './NavBar.css';\n\nconst NavBar = props => (\n    <div className=\"navbar \">\n        <div>Clicky Game</div>\n        <div className={props.navMsgColor}>{props.navMessage}</div>\n        <div>\n            Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\n        </div>\n    </div>\n);\n\nexport default NavBar;\n","import React from 'react';\nimport './Character.css';\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst Character = props => (\n    <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n        <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n    </div>\n);\n\nexport default Character;","import React from 'react';\nimport './Container.css';\nimport Character from '../Character';\n\n// main container for each Character component\n// loops through each index in props.characters, which contains an array of character images\n// to create a new Character component for each image\n// attaches the passed down clickEvent function to each Character component\nconst Container = props => (\n    // loops through\n    <div\n        className={\n            props.shake\n                ? 'container d-flex flex-wrap justify-content-center shake'\n                : 'container d-flex flex-wrap justify-content-center'\n        }\n    >\n        {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\n    </div>\n);\n\nexport default Container;","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => <div className=\"footer text-center\">Clicky Game HW 2019</div>;\n\nexport default Footer;","import React from 'react';\nimport './Banner.css';\n\nconst Banner = () => (\n    <div className=\"banner text-center d-flex align-items-center justify-content-center\">\n        <p className=\"m-0\">Click on an image to earn points, but don't click on any more than once!</p>\n    </div>\n);\nexport default Banner;\n","import beth from './beth.png';\nimport birdperson from './birdperson.png';\nimport evilmorty from './evilmorty.png';\nimport gianthead from './gianthead.png';\nimport goldenford from './goldenford.png';\nimport jerry from './jerry.png';\nimport jessica from './jessica.png';\nimport meeseeks from './meeseeks.png';\nimport morty from './morty.png';\nimport mr from './mr.png';\nimport rick from './rick.png';\nimport summer from './summer.png';\n\nconst images = [\n    beth,\n    birdperson,\n    evilmorty,\n    gianthead,\n    goldenford,\n    jerry,\n    jessica,\n    meeseeks,\n    morty,\n    mr,\n    rick,\n    summer\n];\n\nexport default images;","import React, { Component } from 'react';\nimport NavBar from './NavBar/index.js';\nimport Container from './Container/index.js';\nimport Footer from './Footer/index.js';\nimport Banner from './Banner/index.js';\nimport images from './images/images.js';\n\nfunction shuffleImages(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\nclass ClickyGame extends Component {\n    state = {\n        images,\n        score: 0,\n        highScore: 0,\n\n        // stores the class value to assign to navMessage based on a good or bad click\n        navMsgColor: '',\n\n        // contains intro, success, and failure message\n        navMessage: 'Click an image to begin!',\n\n        // contains an array of image urls\n        allCharacters: this.shuffleArray(),\n\n        // will track  each clicked element.\n        wasClicked: [],\n\n        // shakes the container on an incorrect guess if set to true\n        shake: false\n    };\n\n    // binds the current this context to checkClicked to have access to the current state\n    // when passed down to the Character component\n    clickEvent = this.checkClicked.bind(this);\n\n    // used to shuffle the array of images when the DOM loads, and when an image is clicked\n    shuffleArray() {\n        // creates a copy of the current characters array to modify it by value, and not by reference\n        const newArr = images.slice();\n\n        // will store the shuffled array\n        const shuffleArr = [];\n\n        // each loop through an index gets spliced from newArr, reducing its length\n        // gets a random index based off the current length of newArr\n        // splices the value from newArr, and pushes it to shuffleArr\n        while (newArr.length > 0) {\n            shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n        }\n\n        return shuffleArr;\n    }\n\n    checkClicked(clickedElem) {\n        // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n        const prevState = this.state.wasClicked.slice();\n\n        // shuffles the images\n        const shuffled = this.shuffleArray();\n\n        // tracks score\n        let score = this.state.score;\n        let highScore = this.state.highScore;\n\n        // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n        if (!this.state.wasClicked.includes(clickedElem)) {\n            // if score and highScore are the same, then there is a new highScore value\n            if (score === highScore) {\n                score++;\n                highScore++;\n\n                // if they are not equal, then only increase the score value\n            } else {\n                score++;\n            }\n\n            // adds the clicked item to wasClicked to track that it has been clicked\n            prevState.push(clickedElem);\n        }\n\n        // resets the current score if the same element was clicked twice\n        if (this.state.wasClicked.includes(clickedElem)) {\n            let score = 0;\n            return this.setState({\n                score: score,\n                highScore: highScore,\n                navMsgColor: 'incorrect',\n                navMessage: 'Incorrect guess!',\n                allCharacters: shuffled,\n                wasClicked: [],\n                shake: true\n            });\n        }\n\n        // if this runs, then the same element has not been clicked twice and the score is increased\n        this.setState({\n            score: score,\n            highScore: highScore,\n            navMsgColor: 'correct',\n            navMessage: 'You Guessed Correctly!',\n            allCharacters: shuffled,\n            wasClicked: prevState,\n            shake: false\n        });\n\n        // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n        return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n    }\n\n    handleShuffle = () => {\n        let shuffledImages = shuffleImages(images);\n        this.setState({ images: shuffledImages });\n    };\n\n    // renders score to the navbar.\n    // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n    // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n    render() {\n        const state = this.state;\n        return (\n            <div>\n                <NavBar\n                    score={state.score}\n                    highScore={state.highScore}\n                    navMessage={state.navMessage}\n                    navMsgColor={state.navMsgColor}\n                />\n                <Banner />\n                <Container\n                    shake={state.shake}\n                    characters={state.allCharacters}\n                    clickEvent={this.clickEvent}\n                />\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default ClickyGame;","import React from 'react';\nimport './App.css';\nimport ClickyGame from \"./components/ClickyGame\";\n\nfunction App() {\n  return <ClickyGame />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}